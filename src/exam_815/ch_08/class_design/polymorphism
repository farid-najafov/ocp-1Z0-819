Java supports polymorphism, the property of an object to take on many different forms.
To put this more precisely, a Java object may be accessed using a reference with the same type as the object,
a reference that is a superclass of the object, or a reference that defines an interface the object implements,
either directly or through a superclass. Furthermore, a cast is not required if the object is being reassigned
to a super type or interface of the object.

Objects vs. Reference

-- The type of the object determines which properties exist within the object in memory.
-- The type of the reference to the object determines which methods and variables are accessible to the Java program.

Casting Objects

1. Casting a reference from a subtype to a supertype does not require an explicit cast.
2. Casting a reference from a supertype to a subtype requires an explicit cast.
3. The compiler disallows casts to an unrelated class.
4. At runtime, an invalid cast of a reference to an unrelated type results in a ClassCastException being thrown.